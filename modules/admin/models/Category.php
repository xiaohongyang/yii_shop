<?php
/**
 * Created by PhpStorm.
 * User: xiaohongyang
 * Date: 2015/6/26
 * Time: 16:48
 */

namespace app\modules\admin\models;


use yii\behaviors\TimestampBehavior;
use yii\data\ActiveDataProvider;
use yii\db\ActiveRecord;
use yii\helpers\ArrayHelper;

class Category extends BaseModel{

    const SCENARIO_CREATE = 'create';
    const SCENARIO_UPDATE = 'update';
    const SCENARIO_DELETE = 'delete';

    const DEFAULT_ORD = 50;

    public $oldParentId = null;

    /*

    public $category_id;
    public $category_name;
    public $parent_id;
    public $parent_path;
    public $child_num;
    public $child_str;
    public $level;
    public $state;
    public $ord;
    public $genre_id;*/

    /**
     * 验证规则
     *
     * @return array
     */
    public function rules()
    {
        return [
            //scenario create
            [ ['category_name', 'parent_id', 'state', 'ord', 'genre_id'], 'required', 'on' => self::SCENARIO_CREATE, ],
            [ 'parent_id', 'match', 'pattern' => '/^[0-9]+$/', 'message' => '父类别有误!', 'on' => self::SCENARIO_CREATE ],

            //scenario update
            [ 'parent_id', function ($attribute, $params) {
                //判断父类别是否非法

                //1.父类别是本身自己
                if ( $this->parent_id == $this->category_id) {

                    $this->addError($attribute, '父类非法,不能将自己设置为父类别!');
                    return false;
                }

                //2.父类别是自己的下级类别
                $parentInfo = $this->find()->where( array( 'category_id' => $this->parent_id) )->select(['parent_path'])->one();

                $parentPath = '';
                $parentInfo && $parentPath = $parentInfo['parent_path'];

                if ($parentPath) {

                    if ($this->category_id == $this->parent_id || in_array($this->category_id, explode(',', $parentPath))) {

                        $this->addError($attribute, '父类非法,不能将子类别设置为父类别!');

                    }
                }




            }, 'on' => self::SCENARIO_UPDATE ],
            ['genre_id', 'match' ,'pattern' => '/^[1-9]+[0-9]*$/' , 'message' => '请选择', 'on' => [self::SCENARIO_CREATE,self::SCENARIO_UPDATE]],


            //scenario delete
            ['category_id', function ( $attribute, $params ) {

                if ($this->find()->where(['parent_id' => $this->category_id])->count()) {

                    $this->addError($attribute, "该类别拥有子类别，删除失败!");
                }
            }, 'on' => self::SCENARIO_DELETE]
        ];
    }

    /**
     * scenarios
     *
     * @return array
     */
    public function scenarios()
    {
        return [
            self::SCENARIO_CREATE => ['category_name', 'parent_id', 'state', 'ord', 'genre_id'],
            self::SCENARIO_UPDATE => ['category_id', 'category_name', 'parent_id', 'state', 'ord', 'genre_id'],
            self::SCENARIO_DELETE => ['category_id']
        ];
    }

    public function behaviors()
    {
        return [
            'timestamp' =>[
                'class' => TimestampBehavior::className()
            ]
        ];
    }

    /**
     * 保存类别前处理
     * 1.插入数据前设置parent_path字段值、level字段值
     *
     * @param bool $insert
     * @return bool
     */
    public function beforeSave($insert)
    {

        if ( $insert ||  $this->parent_id != $this->getOldAttribute('parent_id') ) {
            //添加数据

            if ($this->parent_id > 0) {

                $parent = self::find() -> where(['category_id' => $this->parent_id])
                    -> select(['category_id', 'parent_path', 'level'])
                    -> one();

                if ($parent && !empty($parent['category_id'])) {
                    $this->parent_path = $parent['parent_path'].','.$parent['category_id'];
                    $this->level = $parent->level+1;
                }
            } else {
                $this->parent_path = 0;
                $this->level = 1;
            }


        }
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub

    }

    /**
     * 保存类别后处理
     * 1. 新添加数据时 更新父亲节点的child_num、child_str字段值
     *
     * @param bool $insert
     * @param array $changedAttributes
     */
    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub


        if ($insert || !is_null($this->oldParentId)) {

            $this->editParent( $this->parent_id );

            if ( !is_null($this->oldParentId) ) {

                //更新旧的父类别数据
                $this->editParent($this->oldParentId);

                //更新自己子类的 parent_path值
                $parentPath = $this->parent_id ? $this->parent_path.','.$this->category_id : '0,'.$this->category_id;

                $this->editChild( $this->category_id, $parentPath, $this->level+1 );
            }
        }


    }

    public function afterDelete()
    {

        $this->editParent($this->parent_id);
        parent::afterDelete(); // TODO: Change the autogenerated stub
    }

    /**
     * 更新父类别的child_num、child_str字段
     *
     * @param $parent_id
     */
    private function editParent( $parent_id )
    {
        //1.更新父亲节点的child_num、child_str
        $parent = self::find()  ->where(['category_id' => $parent_id ])
            ->select(['category_id', 'child_num', 'child_str'])
            ->one();

        if ($parent && !empty($parent->category_id) ) {

            $child_num = 0;
            $child_str = '';
            $child_category_id_arr = [];

            $children = self::find() -> where(['parent_id' => $parent_id])
                -> select('category_id')
                -> all();

            if (is_array($children) && $children) {

                foreach ($children as $_item) {
                    $child_category_id_arr[] = $_item->category_id;
                }

                $child_str = implode(',', $child_category_id_arr);
                $child_num = count($children);
            }

            //更新父亲节点的child_num、child_str
            $parent->child_num = $child_num;
            $parent->child_str = $child_str;
            $parent->scenario = self::SCENARIO_UPDATE;

            $parent->save();

        }
    }

    /**
     * 递归更新子类的parent_path、level字段
     *
     * @param $parent_id
     * @param $parent_path
     * @param $level
     */
    private function editChild( $parent_id, $parent_path, $level )
    {
        $childs = self::find()  -> where(['parent_id' => $parent_id])
                                -> select(['category_id', 'parent_path', 'level'])
                                -> all();

        if (is_array($childs) && count($childs)) {
            foreach ($childs as $child) {

                $child->parent_path = $parent_path;
                $child->level = $level;
                $child->scenario = self::SCENARIO_UPDATE;


                if ($child->save()) {

                    //递归更新子类的子类
                    $path = $child->parent_path.','.$child->category_id;

                    $this->editChild( $child->category_id, $path, $child->level+1 );
                }
            }
        }

    }


    /**************** curd begin **************/
    /**
     * 类别列表
     *
     * @param array $params
     * @return ActiveDataProvider
     */
    public function tabulation($params = [])
    {

        $query = self::find();

        if (is_array($params) && count($params)) {

        }

        $dataProvider = new ActiveDataProvider([
            'query' => $query,

        ]);


        return $dataProvider;



    }

    /**
     * 创建类别
     *
     * @param $params
     * @return bool
     */
    public function create($params)
    {


        $this->scenario = self::SCENARIO_CREATE;
        if ($this->load($params) && $this->validate()) {

            return $this->save();
        }

        return false;

    }

    /**
     * 更新类别
     *
     * @param ActiveRecord $type
     * @return bool
     */
    public function edit($params)
    {

        $this->scenario = self::SCENARIO_UPDATE;
        if ( $this->load($params) && $this->validate() ) {

            if ($this->parent_id != $this->getOldAttribute('parent_id')) {

                //记录来的父类别id
                $this->oldParentId = $this->getOldAttribute('parent_id');
            }
            return $this->save();
        }

        return false;

    }

    /**
     * 删除类别
     *
     * @param $typeId
     * @return false|int
     * @throws \Exception
     */
    public function remove($category_id = null)
    {

        if (is_null($category_id) || !is_numeric($category_id) || $category_id<1) {

            $this->addError('error', 'id错误!');
            return false;
        }

        $this->scenario = self::SCENARIO_DELETE;

        if ($this->category_id = $category_id  ) {

            if($this->validate())
                return self::findOne($category_id)->delete();
        } else {
            return false;
        }

    }

    /**************** // curd end **************/


    /**
     * 获取类别树
     *
     * @param array $columnFix
     * @return array
     */
    public function getListtree($columnFix = [null, null]){

        $list = $this->tabulation()->getModels();

        foreach ($list as &$v) {

            $cpModel = clone $v;
            $v = $v->toArray();
            $v['getModel'] = $cpModel;
        }

        $tree = list_to_tree($list, 'category_id', 'parent_id');

        return $tree;
    }

    /**
     * 获取类别的类别树的一维列表
     *
     * @return array|mixed
     */
    public function getListtree2Linear( $columnFix = ['category_name', '----'] )
    {

        $tree = $this->getListtree();

        $linearArray = multiArray2LinearArray($tree, null, $columnFix);

        return $linearArray;
    }

    /**
     * 获取上级类别下拉菜单key-value值一维数组
     *
     * @return array
     */
    public function getDropdownData()
    {
        $listTreeLinear = $this->getListtree2Linear();

        //组建key-value键值对一维数组
        $listArray = ArrayHelper::map($listTreeLinear, 'category_id', 'category_name');

        $listArray = ArrayHelper::merge(['0'=>'|--无上级类别'], $listArray);

        return $listArray;
    }


}